From 26b255819ac04a6d440a88204e1f608ae6131305 Mon Sep 17 00:00:00 2001
From: Kazunori Kobayashi <kkobayas@igel.co.jp>
Date: Tue, 18 Mar 2014 10:35:57 +0900
Subject: [PATCH 05/16] playsink: Move the queue plugin insertion after the
 videoconvert plugin in the pipeline

When the zero-copy buffer passing between decoder and videoconvert plugins
performs, the decoding and the conversion processing may not synchronize
if a queue plugin is inserted between them. To avoid this, the queue plugin
should be inserted after the videoconvert plugin because the synchronization
is ensured by the buffer management of the bufferpool in videosink plugin.

When the pool's buffers are used, this malfunction does not occur
because it is ensured that the each buffer once returns to the pool
after the use of the buffer and the next buffer acquisition will
perform after that.

Index: gst-plugins-base-1.4.0/gst/playback/gstplaysink.c
===================================================================
--- gst-plugins-base-1.4.0.orig/gst/playback/gstplaysink.c	2014-07-16 12:18:45.000000000 +0300
+++ gst-plugins-base-1.4.0/gst/playback/gstplaysink.c	2014-08-29 10:06:49.000000000 +0300
@@ -1829,30 +1829,6 @@
     }
   }
 
-  /* decouple decoder from sink, this improves playback quite a lot since the
-   * decoder can continue while the sink blocks for synchronisation. We don't
-   * need a lot of buffers as this consumes a lot of memory and we don't want
-   * too little because else we would be context switching too quickly. */
-  chain->queue = gst_element_factory_make ("queue", "vqueue");
-  if (chain->queue == NULL) {
-    post_missing_element_message (playsink, "queue");
-    GST_ELEMENT_WARNING (playsink, CORE, MISSING_PLUGIN,
-        (_("Missing element '%s' - check your GStreamer installation."),
-            "queue"), ("video rendering might be suboptimal"));
-  } else {
-    g_object_set (G_OBJECT (chain->queue), "max-size-buffers", 3,
-        "max-size-bytes", 0, "max-size-time", (gint64) 0, "silent", TRUE, NULL);
-    gst_bin_add (bin, chain->queue);
-    if (prev) {
-      if (!gst_element_link_pads_full (prev, "src", chain->queue, "sink",
-              GST_PAD_LINK_CHECK_TEMPLATE_CAPS))
-        goto link_failed;
-    } else {
-      head = chain->queue;
-    }
-    prev = chain->queue;
-  }
-
   GST_OBJECT_LOCK (playsink);
   if (playsink->colorbalance_element) {
     g_signal_handler_disconnect (playsink->colorbalance_element,
@@ -1892,18 +1868,37 @@
     GST_OBJECT_UNLOCK (playsink);
 
     gst_bin_add (bin, chain->conv);
+
+    head = prev = chain->conv;
+  }
+
+  update_colorbalance(playsink);
+
+  /* decouple decoder from sink, this improves playback quite a lot since the
+   * decoder can continue while the sink blocks for synchronisation. We don't
+   * need a lot of buffers as this consumes a lot of memory and we don't want
+   * too little because else we would be context switching too quickly. */
+  chain->queue = gst_element_factory_make ("queue", "vqueue");
+  if (chain->queue == NULL) {
+    post_missing_element_message (playsink, "queue");
+    GST_ELEMENT_WARNING (playsink, CORE, MISSING_PLUGIN,
+        (_("Missing element '%s' - check your GStreamer installation."),
+            "queue"), ("video rendering might be suboptimal"));
+  } else {
+    g_object_set (G_OBJECT (chain->queue), "max-size-buffers", 3,
+        "max-size-bytes", 0, "max-size-time", (gint64) 0, "silent", TRUE, NULL);
+    gst_bin_add (bin, chain->queue);
+
     if (prev) {
-      if (!gst_element_link_pads_full (prev, "src", chain->conv, "sink",
+      if (!gst_element_link_pads_full (prev, "src", chain->queue, "sink",
               GST_PAD_LINK_CHECK_TEMPLATE_CAPS))
         goto link_failed;
     } else {
-      head = chain->conv;
+      head = chain->queue;
     }
-    prev = chain->conv;
+    prev = chain->queue;
   }
 
-  update_colorbalance (playsink);
-
   if (prev) {
     GST_DEBUG_OBJECT (playsink, "linking to sink");
     if (!gst_element_link_pads_full (prev, "src", chain->sink, NULL,
